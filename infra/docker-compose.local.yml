version: '3.8'

services:
  flask-app:
    build:
      context: ..
      dockerfile: infra/Dockerfile.flask
    ports:
      - "10000:10000"
    env_file:
      - .env
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CELERY_BROKER_URL=redis://:RDga5zyMvEbhSeA9@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:RDga5zyMvEbhSeA9@redis:6379/0
    depends_on:
      - redis
    networks:
      - app-network

  celery-worker:
    build:
      context: ..
      dockerfile: infra/Dockerfile.worker
    command: celery -A app.celery_worker.config:celery_app worker --loglevel=info --concurrency=10 --max-memory-per-child=400000
    env_file:
      - .env
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CELERY_BROKER_URL=redis://:RDga5zyMvEbhSeA9@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:RDga5zyMvEbhSeA9@redis:6379/0
    depends_on:
      - redis
    networks:
      - app-network

  celery-beat:
    build:
      context: ..
      dockerfile: infra/Dockerfile.worker
    command: celery -A app.celery_worker.config:celery_app beat --loglevel=info 
    env_file:
      - .env
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CELERY_BROKER_URL=redis://:RDga5zyMvEbhSeA9@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:RDga5zyMvEbhSeA9@redis:6379/0
    depends_on:
      - redis
      - celery-worker
    networks:
      - app-network

  redis:
    image: redis:latest
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - app-network
    env_file:
      - .env
    hostname: redis
    container_name: redis
    command: redis-server /usr/local/etc/redis/redis.conf --appendonly yes --save "" --stop-writes-on-bgsave-error no # Changes the way we store backups in the disk to have less chance of corruption.
    healthcheck: # Will not start other containers if this fails
      test: ["CMD", "redis-cli", "ping"] 
      interval: 5s  
      retries: 5 
  
networks:
  app-network:
    driver: bridge

volumes:
  redis-data:
    driver: local #With this, the redis data survives when machine stops and restarts or docker down and up again.